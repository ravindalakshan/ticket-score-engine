// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: scoring.proto

package scoringpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request to get scores between two dates
type ScoreRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartDate     string                 `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"` // Format: "YYYY-MM-DD"
	EndDate       string                 `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`       // Format: "YYYY-MM-DD"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScoreRequest) Reset() {
	*x = ScoreRequest{}
	mi := &file_scoring_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreRequest) ProtoMessage() {}

func (x *ScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreRequest.ProtoReflect.Descriptor instead.
func (*ScoreRequest) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{0}
}

func (x *ScoreRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *ScoreRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

// Single category score result
type CategoryScore struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CategoryName  string                 `protobuf:"bytes,1,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`
	Date          string                 `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Score         float32                `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
	RatingCount   int32                  `protobuf:"varint,4,opt,name=rating_count,json=ratingCount,proto3" json:"rating_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryScore) Reset() {
	*x = CategoryScore{}
	mi := &file_scoring_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryScore) ProtoMessage() {}

func (x *CategoryScore) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryScore.ProtoReflect.Descriptor instead.
func (*CategoryScore) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{1}
}

func (x *CategoryScore) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *CategoryScore) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *CategoryScore) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *CategoryScore) GetRatingCount() int32 {
	if x != nil {
		return x.RatingCount
	}
	return 0
}

// Response with multiple category scores
type ScoreResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scores        []*CategoryScore       `protobuf:"bytes,1,rep,name=scores,proto3" json:"scores,omitempty"`
	IsWeekly      bool                   `protobuf:"varint,2,opt,name=is_weekly,json=isWeekly,proto3" json:"is_weekly,omitempty"` // Indicates if aggregation is weekly
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScoreResponse) Reset() {
	*x = ScoreResponse{}
	mi := &file_scoring_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreResponse) ProtoMessage() {}

func (x *ScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreResponse.ProtoReflect.Descriptor instead.
func (*ScoreResponse) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{2}
}

func (x *ScoreResponse) GetScores() []*CategoryScore {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *ScoreResponse) GetIsWeekly() bool {
	if x != nil {
		return x.IsWeekly
	}
	return false
}

var File_scoring_proto protoreflect.FileDescriptor

const file_scoring_proto_rawDesc = "" +
	"\n" +
	"\rscoring.proto\x12\ascoring\"H\n" +
	"\fScoreRequest\x12\x1d\n" +
	"\n" +
	"start_date\x18\x01 \x01(\tR\tstartDate\x12\x19\n" +
	"\bend_date\x18\x02 \x01(\tR\aendDate\"\x81\x01\n" +
	"\rCategoryScore\x12#\n" +
	"\rcategory_name\x18\x01 \x01(\tR\fcategoryName\x12\x12\n" +
	"\x04date\x18\x02 \x01(\tR\x04date\x12\x14\n" +
	"\x05score\x18\x03 \x01(\x02R\x05score\x12!\n" +
	"\frating_count\x18\x04 \x01(\x05R\vratingCount\"\\\n" +
	"\rScoreResponse\x12.\n" +
	"\x06scores\x18\x01 \x03(\v2\x16.scoring.CategoryScoreR\x06scores\x12\x1b\n" +
	"\tis_weekly\x18\x02 \x01(\bR\bisWeekly2T\n" +
	"\x0eScoringService\x12B\n" +
	"\x11GetCategoryScores\x12\x15.scoring.ScoreRequest\x1a\x16.scoring.ScoreResponseB)Z'ticket-score-engine/generated/scoringpbb\x06proto3"

var (
	file_scoring_proto_rawDescOnce sync.Once
	file_scoring_proto_rawDescData []byte
)

func file_scoring_proto_rawDescGZIP() []byte {
	file_scoring_proto_rawDescOnce.Do(func() {
		file_scoring_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_scoring_proto_rawDesc), len(file_scoring_proto_rawDesc)))
	})
	return file_scoring_proto_rawDescData
}

var file_scoring_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_scoring_proto_goTypes = []any{
	(*ScoreRequest)(nil),  // 0: scoring.ScoreRequest
	(*CategoryScore)(nil), // 1: scoring.CategoryScore
	(*ScoreResponse)(nil), // 2: scoring.ScoreResponse
}
var file_scoring_proto_depIdxs = []int32{
	1, // 0: scoring.ScoreResponse.scores:type_name -> scoring.CategoryScore
	0, // 1: scoring.ScoringService.GetCategoryScores:input_type -> scoring.ScoreRequest
	2, // 2: scoring.ScoringService.GetCategoryScores:output_type -> scoring.ScoreResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_scoring_proto_init() }
func file_scoring_proto_init() {
	if File_scoring_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_scoring_proto_rawDesc), len(file_scoring_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scoring_proto_goTypes,
		DependencyIndexes: file_scoring_proto_depIdxs,
		MessageInfos:      file_scoring_proto_msgTypes,
	}.Build()
	File_scoring_proto = out.File
	file_scoring_proto_goTypes = nil
	file_scoring_proto_depIdxs = nil
}
