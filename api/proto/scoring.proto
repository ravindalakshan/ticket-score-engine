syntax = "proto3";

package scoring;

option go_package = "ticket-score-engine/generated/scoringpb";

// Request to get scores between two dates
message ScoreRequest {
  string start_date = 1; // Format: "YYYY-MM-DD"
  string end_date = 2;   // Format: "YYYY-MM-DD"
}

// Request for period comparison
message PeriodComparisonRequest {
  ScoreRequest current_period = 1;
  ScoreRequest previous_period = 2;
}


// ===== Category Score =====

// Single category score result
message CategoryScore {
  string category_name = 1;
  string date = 2;
  float score = 3;
  int32 rating_count = 4;
}

// Response with multiple category scores
message ScoreResponse {
  repeated CategoryScore scores = 1;
  bool is_weekly = 2; // Indicates if aggregation is weekly
}

// ===== Ticket Score =====

// Per-ticket category score entry
message TicketScore {
  int32 ticket_id = 1;
  map<string, float> category_scores = 2; // Category name -> percentage score
}

// Response containing ticket-level category scores
message TicketScoreResponse {
  repeated TicketScore ticket_scores = 1;
}

// ===== Overall Score =====

message OverallScoreResponse {
  float score = 1;         // Overall score percentage (0-100)
  int32 rating_count = 2;  // Total number of ratings
}

// ===== Period Comparison =====

message PeriodComparisonResponse {
  float percentage_change = 1;  // Percentage change between periods
  float current_score = 2;      // Score for current period
  float previous_score = 3;     // Score for previous period
  int32 current_count = 4;      // Rating count for current period
  int32 previous_count = 5;     // Rating count for previous period
}

// ===== gRPC Service =====

service ScoringService {
  rpc GetCategoryScores (ScoreRequest) returns (ScoreResponse);
  rpc GetTicketScores (ScoreRequest) returns (TicketScoreResponse);
  rpc GetOverallScore (ScoreRequest) returns (OverallScoreResponse);
  rpc GetPeriodComparison (PeriodComparisonRequest) returns (PeriodComparisonResponse);
}
